import os
import numpy as np
import torch
from NPI import ANN_LSTM, train_NN, model_FC, multi2one

# ---------------------- Configuration ----------------------
MODEL_TYPE = 'LSTM'
base_root = "D:/op/ANN/TMS_fMRI_2.0.0_AAL424"
subfolders = ["TMS_fMRI_2.0.0_NTHC", "TMS_fMRI_2.0.0_NTS", "TMS_fMRI_2.0.0_TEHC", "TMS_fMRI_2.0.0_TIS"]
steps_range = list(range(2, 11))

stepwise_correlation = {}

for steps in steps_range:
    correlations = []

    print(f"\n>>> Evaluating steps = {steps}")
    for subfolder in subfolders:
        base_path = os.path.join(base_root, subfolder, "resting")
        if not os.path.exists(base_path):
            continue

        for file in os.listdir(base_path):
            if not file.endswith(".npy"):
                continue

            file_path = os.path.join(base_path, file)
            data = np.load(file_path, allow_pickle=True)
            if data.ndim != 2:
                continue

            node_num = data.shape[1]
            input_X, target_Y = multi2one(data, steps)

            # 模型构造
            model = ANN_LSTM(
                input_dim=node_num,
                hidden_dim=int(2.5 * node_num),
                latent_dim=int(2.5 * node_num),
                output_dim=node_num,
                data_length=steps
            )

            trained_model, train_loss, test_loss = train_NN(model, input_X, target_Y)
            model_fc = model_FC(trained_model, node_num, steps)
            true_fc = np.corrcoef(data.T)

            # 计算 FC 相关性
            mask = ~np.eye(node_num, dtype=bool)
            fc_corr = np.corrcoef(true_fc[mask], model_fc[mask])[0, 1]
            correlations.append(fc_corr)

            # 可选：注释掉权重保存
            # subject_id = os.path.splitext(file)[0]
            # weight_dir = f"D:/op/ANN/models/{MODEL_TYPE}/step_{steps}"
            # os.makedirs(weight_dir, exist_ok=True)
            # torch.save(trained_model.state_dict(), os.path.join(weight_dir, f"{subject_id}.pt"))

    # 汇总每步长的平均相关性
    if correlations:
        avg_corr = np.mean(correlations)
        stepwise_correlation[steps] = avg_corr
        print(f"[✓] Step {steps}: Avg FC correlation = {avg_corr:.4f}")

# 保存为 npy 文件
output_path = f"D:/op/ANN/step_vs_corr_{MODEL_TYPE}.npy"
np.save(output_path, stepwise_correlation)
print("\n[✓] Saved stepwise FC correlation.")

