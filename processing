import os
import numpy as np
import torch
from NPI import ANN_RNN, ANN_MLP, ANN_CNN, ANN_VAR, train_NN, model_FC, multi2one

# ---------------------- Configuration ----------------------
MODEL_TYPE = 'RNN'  # Options: 'RNN', 'MLP', 'CNN', 'VAR'
base_root = "D:/op/ANN/TMS_fMRI_2.0.0_AAL424"
subfolders = ["TMS_fMRI_2.0.0_NTHC", "TMS_fMRI_2.0.0_NTS", "TMS_fMRI_2.0.0_TEHC", "TMS_fMRI_2.0.0_TIS"]
steps_range = list(range(3, 11))  # steps from 3 to 10

all_results = {}

for steps in steps_range:
    all_results[steps] = {}
    print(f"\n>>> Processing steps = {steps}")

    for subfolder in subfolders:
        base_path = os.path.join(base_root, subfolder, "resting")
        if not os.path.exists(base_path):
            continue

        for file in os.listdir(base_path):
            if not file.endswith(".npy"):
                continue

            file_path = os.path.join(base_path, file)
            data = np.load(file_path, allow_pickle=True)
            if data.ndim != 2:
                continue

            node_num = data.shape[1]
            input_X, target_Y = multi2one(data, steps)

            # ---------------------- Model Init ----------------------
            if MODEL_TYPE == 'RNN':
                model = ANN_RNN(
                    input_dim=node_num,
                    hidden_dim=int(2.5 * node_num),
                    latent_dim=int(2.5 * node_num),
                    output_dim=node_num,
                    data_length=steps
                )
            elif MODEL_TYPE == 'MLP':
                model = ANN_MLP(
                    input_dim=steps * node_num,
                    hidden_dim=2 * node_num,
                    latent_dim=int(0.8 * node_num),
                    output_dim=node_num
                )
            elif MODEL_TYPE == 'CNN':
                model = ANN_CNN(
                    in_channels=node_num,
                    hidden_channels=node_num,
                    out_channels=int(0.8 * node_num),
                    data_length=steps
                )
            elif MODEL_TYPE == 'VAR':
                model = ANN_VAR(
                    input_dim=steps * node_num,
                    output_dim=node_num
                )
            else:
                raise ValueError("Unsupported model type")

            # ---------------------- Train + Predict FC ----------------------
            trained_model, train_loss, test_loss = train_NN(model, input_X, target_Y)
            model_fc = model_FC(trained_model, node_num, steps)
            true_fc = np.corrcoef(data.T)

            # ---------------------- Flatten + Correlation ----------------------
            mask = ~np.eye(node_num, dtype=bool)
            fc_corr = np.corrcoef(true_fc[mask], model_fc[mask])[0, 1]

            subject_id = os.path.splitext(file)[0]
            all_results[steps][subject_id] = {
                "fc_correlation": fc_corr,
                "train_loss": train_loss,
                "test_loss": test_loss,
                "model_type": MODEL_TYPE
            }
            print(f"[{subfolder}] {subject_id}: FC corr = {fc_corr:.4f}")

# Save results
output_path = f"D:/op/ANN/stepwise_fc_comparison_{MODEL_TYPE}.npy"
np.save(output_path, all_results)
print("\n[âœ“] All processing complete and saved.")
